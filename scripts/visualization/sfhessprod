#!/usr/bin/env python

# Specialized script used to visualize hessian-vector products

# For convenience this routine assumes a particular directory structure that allows
# simple access to inversion workflows.

import argparse
from os.path import join

import numpy as np
import matplotlib.pyplot as plt

from seisflows.plugins.solver_io.pewf2d import read
from seisflows.plugins.solver.pewf2d import Par

def parse_args():
    # Parse input arguments
    parser = argparse.ArgumentParser(description='Plot misfit gradients.')

    # file and format flags
    parser.add_argument('-f', '--fpath',
                        default='./solver/INPUT/',
                        help='solver parameter file')

    parser.add_argument('-p', '--path',
                        default='scratch/evalgrad',
                        help='gradient path')

    parser.add_argument('--pars', type=str, nargs='*',
                        default=['vp', 'vs', 'rho'],
                        help='gradient path')

    parser.add_argument('-cm', '--cmap',
                        default='seismic_r',
                        help='Matplotlib colormap scheme.')

    parser.add_argument('-c', '--clip', type=int,
                        default='100',
                        help='Clip amplitudes')

    return parser.parse_args()


if __name__ == "__main__":

    args = parse_args()
    p = Par()
    p.read_par_file(join(args.fpath, 'par_template.cfg'))

    pars = args.pars
    n = len(pars)

    # prepare subplot
    fig, axes = plt.subplots(nrows=n, ncols=n)
    plt.set_cmap(args.cmap)
    scale = 0
    imlist = []

    for ipar, par1 in enumerate(pars):
        for jpar, par2 in enumerate(pars):

            model = {}
            model[par2] = read(args.path, par1, prefix='H_{}_'.format(par2))
            model[par2] = model[par2].reshape((p.nz, p.nx))

            # plot
            axes[ipar, jpar].set_title('H_{}_{}'.format(par2, par1))
            imlist += [axes[ipar, jpar].imshow(model[par2])]
            if abs(model[par2]).max() > scale:
                scale = abs(model[par2]).max()

            print 'Norm of H_{}_{}: {:.3e}'.format(par2, par1, np.linalg.norm(model[par2]))
        print '\n'

    for image in imlist:
        image.set_clim(-scale, scale)

    plt.show()