#!/usr/bin/env python

# Specialized script used to compare models

# For convenience this routine assumes a particular directory structure that allows
# simple access to inversion workflows.

import argparse
from os.path import join
import numpy as np

from seisflows.plugins.solver_io.pewf2d import mread
from seisflows.plugins.solver.pewf2d import Par
from seisflows.tools.graphics import plot_model_comp
from seisflows.tools.math import q_factor

def parse_args():
    # Parse input arguments
    parser = argparse.ArgumentParser(description='Plot misfit gradients.')

    # file and format flags
    parser.add_argument('-f', '--fpath',
                        default='./solver/INPUT/',
                        help='solver parameter file')

    parser.add_argument('-p1', '--path1',
                        default='./models/model_true',
                        help='path to model 1')

    parser.add_argument('-p2', '--path2',
                        default='./models/model_init',
                        help='path to model 2')

    parser.add_argument('--pars', type=str, nargs='*',
                        default=['vp', 'vs', 'rho'],
                        help='parameters')

    parser.add_argument('-cm', '--cmap',
                        default='RdBu',
                        help='Matplotlib colormap scheme.')

    return parser.parse_args()


if __name__ == "__main__":

    args = parse_args()
    p = Par()
    p.read_par_file(join(args.fpath, 'par_template.cfg'))

    model1 = mread(args.path1, args.pars)
    model2 = mread(args.path2, args.pars)

    # print model errors
    for key in model1.keys():
        err = q_factor(model1[key], model2[key])
        print '{} model error: {:.6f}'.format(key, err)

    plot_model_comp(model1, model2, p, cmap=args.cmap)
