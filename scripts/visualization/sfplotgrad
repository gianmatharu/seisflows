#!/usr/bin/env python3

# Specialized script used to visualize observed and synthetic data. For convenience this routine assumes a
# particular directory structure that allows simple access to inversion workflows.
# The directories should be set up as scratch/solver/($EVENTID)/traces/obs and
# scratch/solver/($EVENTID)/traces/syn. Designed to be run from the working directory.

import argparse
from seisflows.tools.graphics import plot_grad

# Parse input arguments
parser = argparse.ArgumentParser(description='Plot gradient.')

# file and format flags
parser.add_argument('-nx', type=int, help='pixels in x direction.')
parser.add_argument('-nz', type=int, help='pixels in z direction.')

parser.add_argument('-a', action='store_true', help='Show alpha kernel')
parser.add_argument('-b', action='store_true', help='Show beta kernel')
parser.add_argument('-s', action='store_true', help='Show smoothed kernel')

parser.add_argument('-p', '--path', default='./scratch/evalgrad', help='Path to')

parser.add_argument('-cm', '--cmap', default='seismic_r', help='Matplotlib colormap scheme. \
                    See matplotlib documentation.')
parser.add_argument('-c', '--clip', type=int, default='100', help='Clip amplitudes')

args = parser.parse_args()

plot_grad(args.path, nx=args.nx, nz=args.nz, alpha=args.a, beta=args.b,
            smooth=args.s, cmap=args.cmap, clip=100)

