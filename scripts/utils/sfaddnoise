#!/usr/bin/env python

# Specialized script used to add noise to an SU dataset (assumes dir structure)

# For convenience this routine assumes a particular directory structure that allows
# simple access to inversion workflows.

import argparse
import numpy as np
from os.path import join, exists
from obspy import read

from seisflows.plugins.solver.pewf2d import event_dirname
from seisflows.tools.susignal import saddnoise
from seisflows.tools import unix
from seisflows.tools.graphics import _convert_to_array


def parse_args():
    # Parse input arguments
    parser = argparse.ArgumentParser(description='Plot misfit gradients.')

    # file and format flags
    parser.add_argument('-pd', '--path',
                        help='path to data')

    parser.add_argument('-po', '--opath',
                        help='output path')

    parser.add_argument('-n', '--ntasks',
                        type=int,
                        help='number of sources')

    parser.add_argument('--snr',
                        type=float,
                        help='signal-to-noise ratio')

    parser.add_argument('--clean',
                        action='store_true',
                        default=False,
                        help='noise after first-arrival only')

    return parser.parse_args()


if __name__ == "__main__":

    args = parse_args()
    channels = ['x', 'z']

    # prepare output directory
    if args.path.rstrip('/') == args.opath.rstrip('/'):
        raise ValueError('Input and output paths conflict!')

    if not exists(args.opath):
        unix.mkdir(args.opath)

    for i in xrange(args.ntasks):
        unix.mkdir((join(args.opath, event_dirname(i+1))))

        # fixed variance noise
        x_file = join(args.path, event_dirname(i+1), 'Ux_data.su')
        z_file = join(args.path, event_dirname(i+1), 'Uz_data.su')

        x_stream = read(x_file, format='SU', byteorder='<')
        z_stream = read(z_file, format='SU', byteorder='<')

        # compute RMS for z component
        d = _convert_to_array(z_stream)
        drms = np.sqrt(np.mean(d**2))

        # compute variance of noise
        var = drms**2 / 10**(0.1*args.snr)

        # add fixed-variance noise
        x_out = saddnoise(x_stream, var=var, snr=args.snr, clean=args.clean, verbose=True)
        z_out = saddnoise(z_stream, var=var, snr=args.snr, clean=args.clean, verbose=True)

        # write noisy data
        output = join(args.opath, event_dirname(i+1))
        x_stream.write(join(output, 'Ux_data.su'), format='SU', byteorder='<')
        z_stream.write(join(output, 'Uz_data.su'), format='SU', byteorder='<')
