#!/usr/bin/env python

# Specialized script used to visualize gradients.

# For convenience this routine assumes a particular directory structure that allows
# simple access to inversion workflows.

import argparse
import matplotlib
import numpy as np
from os.path import join
from seisflows.tools.graphics import plot_grad, create_im_subplot
from seisflows.tools.array import readgrid, gridsmooth
import matplotlib.pyplot as plt

def event_dirname(n):
    """ return string with event directory name
    """
    return '{:03d}'.format(n)

def shiftedColorMap(cmap, start=0, midpoint=0.5, stop=1.0, name='shiftedcmap'):
    '''
    Function to offset the "center" of a colormap. Useful for
    data with a negative min and positive max and you want the
    middle of the colormap's dynamic range to be at zero

    Input
    -----
      cmap : The matplotlib colormap to be altered
      start : Offset from lowest point in the colormap's range.
          Defaults to 0.0 (no lower ofset). Should be between
          0.0 and `midpoint`.
      midpoint : The new center of the colormap. Defaults to 
          0.5 (no shift). Should be between 0.0 and 1.0. In
          general, this should be  1 - vmax/(vmax + abs(vmin))
          For example if your data range from -15.0 to +5.0 and
          you want the center of the colormap at 0.0, `midpoint`
          should be set to  1 - 5/(5 + 15)) or 0.75
      stop : Offset from highets point in the colormap's range.
          Defaults to 1.0 (no upper ofset). Should be between
          `midpoint` and 1.0.
    '''
    cdict = {
        'red': [],
        'green': [],
        'blue': [],
        'alpha': []
    }

    # regular index to compute the colors
    reg_index = np.linspace(start, stop, 257)

    # shifted index to match the data
    shift_index = np.hstack([
        np.linspace(0.0, midpoint, 128, endpoint=False), 
        np.linspace(midpoint, 1.0, 129, endpoint=True)
    ])

    for ri, si in zip(reg_index, shift_index):
        r, g, b, a = cmap(ri)

        cdict['red'].append((si, r, r))
        cdict['green'].append((si, g, g))
        cdict['blue'].append((si, b, b))
        cdict['alpha'].append((si, a, a))

    newcmap = matplotlib.colors.LinearSegmentedColormap(name, cdict)
    plt.register_cmap(cmap=newcmap)

    return newcmap

# Parse input arguments
parser = argparse.ArgumentParser(description='Plot misfit gradients.')

# file and format flags
parser.add_argument('-n', type=int, help='Number of events.')
parser.add_argument('-nx', type=int, help='pixels in x direction.')
parser.add_argument('-nz', type=int, help='pixels in z direction.')

parser.add_argument('-pd', '--dpath', default='./data', help='Standard path to misfit kernel')
parser.add_argument('-p', '--path', default='./scratch/solver', help='Standard path to misfit kernel')
parser.add_argument('-s', '--smooth', type=int, default=10, help='Smoothing span')

parser.add_argument('-cm', '--cmap', default='seismic_r', help='Matplotlib colormap scheme. \
                    See matplotlib documentation.')
parser.add_argument('-c', '--clip', type=int, default='100', help='Clip amplitudes')

args = parser.parse_args()

n = args.n
nx = args.nx
nz = args.nz
path = args.path
dpath = args.dpath
s = args.smooth

if n is None:
    raise ValueError('Number of events not specified')

# check parameters
if nx is None or nz is None:
    raise ValueError('Need image dimensions.')

precond = np.zeros((nz, nx))

ga = np.zeros((nz, nx))
gb = np.zeros((nz, nx))

for itask in range(n):

    dir = join(path, event_dirname(itask + 1), 'traces', 'syn')
    ddir = join(dpath, event_dirname(itask + 1))

    vpk = readgrid(join(dir, 'vp_kernel.bin'), nx, nz, dtype='float32')
    vsk = readgrid(join(dir, 'vs_kernel.bin'), nx, nz, dtype='float32')
    p = readgrid(join(dir, 'precond.bin'), nx, nz, dtype='float32')

    ga += vpk
    gb += vsk
    precond += p

#shifted_cmap = shiftedColorMap(matplotlib.cm.coolwarm, start=0.1, midpoint=1.0, stop = 10.0, name='shifted')
#precond /= abs(precond.max()) 
ps = gridsmooth(precond, s)
ps /= abs(ps.max())
ps.astype('float32').tofile('precond.bin')

plt.set_cmap(args.cmap)
plt.subplot(4, 1, 1)
plt.imshow(precond)
plt.colorbar()
plt.subplot(4, 1, 2)
plt.imshow(ps)
plt.colorbar()
plt.subplot(4, 1, 3)
plt.imshow(ga)
plt.clim(-np.abs(ga.max()), np.abs(ga.max()))
plt.subplot(4, 1, 4)
plt.imshow(gb)
plt.clim(-np.abs(gb.max()), np.abs(gb.max()))

psi = (1 / ps) 
psi /= abs(psi.max())
gap = psi * ga
gap /= abs(gap.max())
gbp = psi * gb
gbp /= abs(gbp.max())

plt.figure(2)
plt.subplot(2, 1, 1)
plt.imshow(gap)
plt.colorbar()
plt.clim(-np.abs(gap.max()), np.abs(gap.max()))
plt.subplot(2, 1, 2)
plt.imshow(gbp)
plt.colorbar()
plt.clim(-np.abs(gbp.max()), np.abs(gbp.max()))

plt.show()

