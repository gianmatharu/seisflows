#!/usr/bin/env python

# Specialized script used to visualize gradients.

# For convenience this routine assumes a particular directory structure that allows
# simple access to inversion workflows.

import argparse
from os.path import join

import numpy as np
import matplotlib.pyplot as plt

from seisflows.tools.math import normalize
from seisflows.plugins.solver_io.pewf2d import read, write
from seisflows.plugins.solver.pewf2d import Par, event_dirname
from seisflows.tools.array import gridsmooth, savenpy
from seisflows.tools.graphics import _cscale


def parse_args():
    # Parse input arguments
    parser = argparse.ArgumentParser(description='Plot misfit gradients.')

    # file and format flags
    parser.add_argument('-f', '--fpath',
                        default='./solver/INPUT/',
                        help='solver parameter file')

    parser.add_argument('-p', '--path',
                        default='./scratch/solver/',
                        help='gradient path')

    parser.add_argument('-o', '--opath',
                        default='./PRECOND',
                        help='gradient path')

    parser.add_argument('-s', '--smooth', type=float,
                        default=0.0,
                        help='display smooth')

    parser.add_argument('-cm', '--cmap',
                        default='seismic_r',
                        help='Matplotlib colormap scheme.')

    parser.add_argument('-n', '--nsrc', type=int,
                        help='No. shots')
    
    parser.add_argument('--precond',
                        type=int, choices=[0, 1],
                        default=0,
                        help='Type of preconditioner')

    return parser.parse_args()


if __name__ == "__main__":


    args = parse_args()
    p = Par()
    p.read_par_file(join(args.fpath, 'par_template.cfg'))

    if args.nsrc is None:
        raise ValueError('No. events not specified')

    if args.precond == 0:
        precond_list = ['precond']
        npad = 2
    elif args.precond == 1:
        precond_list = ['H11', 'H22', 'H33']
        npad = 4

    plot_list = []
    prob_dist = np.zeros(args.nsrc)

    # sum over sources
    for item in precond_list:
        precond = np.zeros(p.nz * p.nx)

        for itask in range(args.nsrc):
            path = join(args.path, event_dirname(itask + 1), 'traces/syn')
            precondl = read(path, item)
            prob_dist[itask] += np.sum(precondl)

            precond += precondl

        # smooth and write
        precond = precond.reshape((p.nz, p.nx))
        if args.smooth > 0.0:
            precond[npad:p.nz-npad,npad:p.nx-npad] = gridsmooth(precond[npad:p.nz-npad,npad:p.nx-npad] , args.smooth)

        precond[npad:p.nz-npad,npad:p.nx-npad] = normalize(1.0 / precond[npad:p.nz-npad,npad:p.nx-npad])
        plot_list += [precond]
        write(precond, args.opath, item)

prob_dist /= np.sum(prob_dist)
print prob_dist, sum(prob_dist)
plt.bar(range(args.nsrc), prob_dist)
savenpy('PROB_DIST', prob_dist)

plt.set_cmap('RdBu')
fig, ax = plt.subplots(ncols=len(plot_list), nrows=1, figsize=(10, 10))

if len(plot_list) == 1:
    ax.imshow(plot_list[0], clim=(0, np.max(plot_list[0])))
else:
    for i in xrange(len(plot_list)):
        clim = np.max(plot_list)
        if np.any(plot_list[i] < 0):
            ax[i].imshow(plot_list[i])
        else:
            ax[i].imshow(plot_list[i], clim=(0, np.max(plot_list[i])))
            
        ax[i].set_title(precond_list[i])


plt.show()
